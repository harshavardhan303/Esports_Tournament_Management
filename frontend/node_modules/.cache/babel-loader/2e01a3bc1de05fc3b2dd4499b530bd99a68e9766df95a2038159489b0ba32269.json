{"ast":null,"code":"import api from './api';\n\n// Get all games\nexport const getAllGames = async () => {\n  try {\n    const response = await api.get('/games');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Failed to fetch games'\n    };\n  }\n};\n\n// Get game by ID\nexport const getGameById = async id => {\n  try {\n    const response = await api.get(`/games/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Failed to fetch game'\n    };\n  }\n};\n\n// Create new game (organizer only)\nexport const createGame = async gameData => {\n  try {\n    const response = await api.post('/games', gameData);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      message: 'Failed to create game'\n    };\n  }\n};\n\n// Update game (organizer only)\nexport const updateGame = async (id, gameData) => {\n  try {\n    const response = await api.put(`/games/${id}`, gameData);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Failed to update game'\n    };\n  }\n};\n\n// Get tournaments by game ID\nexport const getGameTournaments = async gameId => {\n  try {\n    const response = await api.get(`/games/${gameId}/tournaments`);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n      message: 'Failed to fetch tournaments for this game'\n    };\n  }\n};","map":{"version":3,"names":["api","getAllGames","response","get","data","error","_error$response","message","getGameById","id","_error$response2","createGame","gameData","post","_error$response3","updateGame","put","_error$response4","getGameTournaments","gameId","_error$response5"],"sources":["C:/esports(3)/frontend/src/services/gameService.js"],"sourcesContent":["import api from './api';\n\n// Get all games\nexport const getAllGames = async () => {\n  try {\n    const response = await api.get('/games');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch games' };\n  }\n};\n\n// Get game by ID\nexport const getGameById = async (id) => {\n  try {\n    const response = await api.get(`/games/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch game' };\n  }\n};\n\n// Create new game (organizer only)\nexport const createGame = async (gameData) => {\n  try {\n    const response = await api.post('/games', gameData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to create game' };\n  }\n};\n\n// Update game (organizer only)\nexport const updateGame = async (id, gameData) => {\n  try {\n    const response = await api.put(`/games/${id}`, gameData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to update game' };\n  }\n};\n\n// Get tournaments by game ID\nexport const getGameTournaments = async (gameId) => {\n  try {\n    const response = await api.get(`/games/${gameId}/tournaments`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch tournaments for this game' };\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAwB,CAAC;EACpE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,EAAE,IAAK;EACvC,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,UAAUM,EAAE,EAAE,CAAC;IAC9C,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAK,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACH,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBN,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAuB,CAAC;EACnE;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMF,GAAG,CAACa,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;IACnD,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAS,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAwB,CAAC;EACpE;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,UAAU,GAAG,MAAAA,CAAON,EAAE,EAAEG,QAAQ,KAAK;EAChD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMF,GAAG,CAACgB,GAAG,CAAC,UAAUP,EAAE,EAAE,EAAEG,QAAQ,CAAC;IACxD,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAY,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAwB,CAAC;EACpE;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,kBAAkB,GAAG,MAAOC,MAAM,IAAK;EAClD,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,UAAUgB,MAAM,cAAc,CAAC;IAC9D,OAAOjB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAe,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAf,KAAK,CAACH,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBhB,IAAI,KAAI;MAAEG,OAAO,EAAE;IAA4C,CAAC;EACxF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}