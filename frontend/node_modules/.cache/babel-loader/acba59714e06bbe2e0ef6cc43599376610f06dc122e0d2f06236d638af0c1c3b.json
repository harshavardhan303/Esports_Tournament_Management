{"ast":null,"code":"import api from './api';\n\n// Register for a tournament\nexport const registerForTournament = async registrationData => {\n  try {\n    const response = await api.post('/registrations', registrationData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Failed to register for tournament'\n    };\n  }\n};\n\n// Get user's registrations\nexport const getUserRegistrations = async () => {\n  try {\n    const response = await api.get('/registrations/myregistrations');\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Failed to fetch your registrations'\n    };\n  }\n};\n\n// Get tournament registrations (organizer only)\nexport const getTournamentRegistrations = async tournamentId => {\n  try {\n    const response = await api.get(`/registrations/tournament/${tournamentId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      message: 'Failed to fetch tournament registrations'\n    };\n  }\n};\n\n// Update registration status (organizer only)\nexport const updateRegistrationStatus = async (registrationId, status) => {\n  try {\n    const response = await api.put(`/registrations/${registrationId}`, {\n      status\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Failed to update registration status'\n    };\n  }\n};\n\n// Cancel registration\nexport const cancelRegistration = async registrationId => {\n  try {\n    const response = await api.delete(`/registrations/${registrationId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n      message: 'Failed to cancel registration'\n    };\n  }\n};","map":{"version":3,"names":["api","registerForTournament","registrationData","response","post","data","error","_error$response","message","getUserRegistrations","get","_error$response2","getTournamentRegistrations","tournamentId","_error$response3","updateRegistrationStatus","registrationId","status","put","_error$response4","cancelRegistration","delete","_error$response5"],"sources":["C:/esports(3)/frontend/src/services/registrationService.js"],"sourcesContent":["import api from './api';\n\n// Register for a tournament\nexport const registerForTournament = async (registrationData) => {\n  try {\n    const response = await api.post('/registrations', registrationData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to register for tournament' };\n  }\n};\n\n// Get user's registrations\nexport const getUserRegistrations = async () => {\n  try {\n    const response = await api.get('/registrations/myregistrations');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch your registrations' };\n  }\n};\n\n// Get tournament registrations (organizer only)\nexport const getTournamentRegistrations = async (tournamentId) => {\n  try {\n    const response = await api.get(`/registrations/tournament/${tournamentId}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch tournament registrations' };\n  }\n};\n\n// Update registration status (organizer only)\nexport const updateRegistrationStatus = async (registrationId, status) => {\n  try {\n    const response = await api.put(`/registrations/${registrationId}`, { status });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to update registration status' };\n  }\n};\n\n// Cancel registration\nexport const cancelRegistration = async (registrationId) => {\n  try {\n    const response = await api.delete(`/registrations/${registrationId}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to cancel registration' };\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,gBAAgB,IAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,gBAAgB,EAAEF,gBAAgB,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAoC,CAAC;EAChF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,gCAAgC,CAAC;IAChE,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAK,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACH,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBN,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAqC,CAAC;EACjF;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,0BAA0B,GAAG,MAAOC,YAAY,IAAK;EAChE,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,6BAA6BG,YAAY,EAAE,CAAC;IAC3E,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAI;MAAEG,OAAO,EAAE;IAA2C,CAAC;EACvF;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,wBAAwB,GAAG,MAAAA,CAAOC,cAAc,EAAEC,MAAM,KAAK;EACxE,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMH,GAAG,CAACkB,GAAG,CAAC,kBAAkBF,cAAc,EAAE,EAAE;MAAEC;IAAO,CAAC,CAAC;IAC9E,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAa,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAuC,CAAC;EACnF;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,kBAAkB,GAAG,MAAOJ,cAAc,IAAK;EAC1D,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACqB,MAAM,CAAC,kBAAkBL,cAAc,EAAE,CAAC;IACrE,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAgB,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAhB,KAAK,CAACH,QAAQ,cAAAmB,gBAAA,uBAAdA,gBAAA,CAAgBjB,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAgC,CAAC;EAC5E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}