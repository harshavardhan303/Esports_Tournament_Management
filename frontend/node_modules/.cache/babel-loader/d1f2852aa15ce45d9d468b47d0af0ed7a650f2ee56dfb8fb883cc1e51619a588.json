{"ast":null,"code":"import api from './api';\n\n// Get all tournaments\nexport const getAllTournaments = async () => {\n  try {\n    const response = await api.get('/tournaments');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Failed to fetch tournaments'\n    };\n  }\n};\n\n// Get tournament by ID\nexport const getTournamentById = async id => {\n  try {\n    const response = await api.get(`/tournaments/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Failed to fetch tournament'\n    };\n  }\n};\n\n// Create new tournament (organizer only)\nexport const createTournament = async tournamentData => {\n  try {\n    const response = await api.post('/tournaments', tournamentData);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      message: 'Failed to create tournament'\n    };\n  }\n};\n\n// Update tournament (organizer only)\nexport const updateTournament = async (id, tournamentData) => {\n  try {\n    const response = await api.put(`/tournaments/${id}`, tournamentData);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Failed to update tournament'\n    };\n  }\n};\n\n// Delete tournament (organizer only)\nexport const deleteTournament = async id => {\n  try {\n    const response = await api.delete(`/tournaments/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n      message: 'Failed to delete tournament'\n    };\n  }\n};\n\n// Get organizer's tournaments\nexport const getOrganizerTournaments = async () => {\n  try {\n    const response = await api.get('/tournaments/organizer/mytournaments');\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n      message: 'Failed to fetch your tournaments'\n    };\n  }\n};\n\n// Get tournament statistics (admin only)\nexport const getTournamentStats = async () => {\n  try {\n    const response = await api.get('/tournaments/admin/stats');\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n      message: 'Failed to fetch tournament statistics'\n    };\n  }\n};","map":{"version":3,"names":["api","getAllTournaments","response","get","data","error","_error$response","message","getTournamentById","id","_error$response2","createTournament","tournamentData","post","_error$response3","updateTournament","put","_error$response4","deleteTournament","delete","_error$response5","getOrganizerTournaments","_error$response6","getTournamentStats","_error$response7"],"sources":["C:/esports(3)/frontend/src/services/tournamentService.js"],"sourcesContent":["import api from './api';\n\n// Get all tournaments\nexport const getAllTournaments = async () => {\n  try {\n    const response = await api.get('/tournaments');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch tournaments' };\n  }\n};\n\n// Get tournament by ID\nexport const getTournamentById = async (id) => {\n  try {\n    const response = await api.get(`/tournaments/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch tournament' };\n  }\n};\n\n// Create new tournament (organizer only)\nexport const createTournament = async (tournamentData) => {\n  try {\n    const response = await api.post('/tournaments', tournamentData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to create tournament' };\n  }\n};\n\n// Update tournament (organizer only)\nexport const updateTournament = async (id, tournamentData) => {\n  try {\n    const response = await api.put(`/tournaments/${id}`, tournamentData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to update tournament' };\n  }\n};\n\n// Delete tournament (organizer only)\nexport const deleteTournament = async (id) => {\n  try {\n    const response = await api.delete(`/tournaments/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to delete tournament' };\n  }\n};\n\n// Get organizer's tournaments\nexport const getOrganizerTournaments = async () => {\n  try {\n    const response = await api.get('/tournaments/organizer/mytournaments');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch your tournaments' };\n  }\n};\n\n// Get tournament statistics (admin only)\nexport const getTournamentStats = async () => {\n  try {\n    const response = await api.get('/tournaments/admin/stats');\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { message: 'Failed to fetch tournament statistics' };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}